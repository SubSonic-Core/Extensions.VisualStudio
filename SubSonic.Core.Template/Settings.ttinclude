<#@ template language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#+
public class Settings
{
	const string connectionKey = @"$connectionKey$";

	public static ITextTemplatingEngineHost Host { get; set; }

	public string[] ExcludeTables
	{
		get
		{ 
			return new string[]{
				"sysdiagrams",
				"BuildVersion",
				"aspnet_Applications",
				"aspnet_Membership",
				"aspnet_Paths",
				"aspnet_PersonalizationAllUsers",
				"aspnet_PersonalizationPerUser",
				"aspnet_Profile",
				"aspnet_Roles",
				"aspnet_SchemaVersions",
				"aspnet_Users",
				"aspnet_UsersInRoles",
				"aspnet_WebEvent_Events"
				};
		}
	}

	public static IDataConnection Connection
	{
		get
		{
			if (GetService<ISubSonicTemplatingService>() is ISubSonicTemplatingService subsonic)
			{
				return subsonic.ConnectionManager[connectionKey];
			}

			throw new InvalidOperationException("Unable to resolve ISubSonicTemplatingService!");
		}
	}

	public static EnvDTE.Project Project
	{
		get
		{
			if (GetService<EnvDTE.DTE>() is EnvDTE.DTE dte)
			{
				if (dte.ActiveSolutionProjects is Array activeSolutionProjects)
				{
					return activeSolutionProjects.GetValue(0) as EnvDTE.Project;
				}
			}
			return default;
		}
	}

	public static TService GetService<TService>()
	{
		if(((IServiceProvider)Host).GetService(typeof(TService)) is TService success)
		{
			return success;
		}
		return default;
	}
}
#>