<#@ template hostspecific="true" language="C#" #>
<#@ include file="SqlServer.ttinclude" #>
<#@ import namespace="System.Linq" #>
<#
	Settings.Host = Host;
	using (Context = new SqlGeneratorContext(Settings.Connection))
    {
#>using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using SubSonic;

namespace TemplateIntegrationTest.DAL.Models
{
<#foreach(Models.Table table in Context.Tables) {
    if (Settings.ExcludeTables.Any(x => x.Equals(table.Name, StringComparison.OrdinalIgnoreCase)))
    {
        continue;
    }
#>
    [Table("<#=table.Name#>", Schema = "<#=table.Schema#>")]
<#if (Context.TableTypes.Any(x => x.SchemaOwner == table.Schema && x.Name == table.Name)) {
    Models.TableType tableType = Context.TableTypes.Single(x => x.SchemaOwner == table.Schema && x.Name == table.Name);
#>
    [DbUserDefinedTableType("<#=tableType.Name#>", SchemaName = "<#=tableType.SchemaOwner#>")]    
<#}#>
    public partial class <#=table.Name#>
    {
        public <#=table.Name#>() { }

<#foreach (Models.Column col in table.Columns.OrderBy(x => x.OrdinalPosition)) {#>
<#if (col.IsPrimaryKey) {#>
        [Key]
<#}#>
<#if (col.IsComputed) {#>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
<#} else if (col.IsIdentity) {#>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
<#}#>
        public <#=((col.IsIdentity || col.IsComputed) ? "" : "virtual ")#><#=col.ToSimpleType()#> <#=col.ColumnName#> { get; set; }
<#}#>
<#foreach (Models.Relationship relation in table.WithOneRelationships) {
    if (Settings.ExcludeRelationships.Any(x => x.Equals(table.Name, StringComparison.OrdinalIgnoreCase)))
    {
        continue;
    }
#>
        [ForeignKey(nameof(<#=relation.ColumnName#>))]
        public virtual <#=relation.ForiegnTableName#> <#=relation.ForiegnTableName#> { get; set; }

<#}#>
<#foreach (Models.Relationship relation in table.WithManyRelationships) {
    if (Settings.ExcludeRelationships.Any(x => x.Equals(table.Name, StringComparison.OrdinalIgnoreCase)))
    {
        continue;
    }
#>
        public virtual ISubSonicCollection<<#=relation.TableName#>> <#=relation.TableName.Pluralize()#> { get; set; }

<#}#>
    }

<#}#>
}
<#}#>